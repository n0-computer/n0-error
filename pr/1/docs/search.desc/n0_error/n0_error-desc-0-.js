searchState.loadedDescShard("n0_error", 0, "n0-error\nType-erased error that can wrap a <code>StackError</code> or any …\nIterator over the sources of an error.\nContains the error value\nReference to an error which can either be a std error or a …\nWrapper around <code>std::panic::Location</code> used for display in …\nCaptured metadata for an error creation site.\nRenders sources on multiple lines\nError returned when converting <code>Option</code>s to an error.\nReturns a result with the error type set to <code>AnyError</code>.\nContains the success value\nRenders sources inline on a single line.\nA <code>Report</code> customizes how an error is displayed.\n<code>Result</code> type alias where the error type defaults to <code>AnyError</code>…\nOutput style for rendering error sources in a <code>Report</code>.\nStackError (has location info).\nTrait implemented by errors produced by this crate.\nDerive macro that implements StackError, Display, Debug, …\nExtension methods for <code>StackError</code>s that are <code>Sized</code>.\nProvides extension methods to add context to <code>StackError</code>s.\nStd error (no location info).\nProvides extension methods to add context to std errors.\nConverts the result’s error into <code>AnyError</code>.\nConverts a value into <code>AnyError</code>.\nConverts a value into <code>AnyError</code>.\nReturns this error as a <code>dyn StackError</code>.\nReturns this error as an <code>ErrorRef</code>.\nReturns this error as an <code>ErrorRef</code>.\nReturns this error as a std error reference.\nReturns the error as a std error.\nReturns an error result by constructing a <code>StackError</code> with <code>e</code>…\nReturns an error result by constructing a <code>StackError</code> with <code>e</code>…\nReturns an error result by constructing an <code>AnyError</code> with …\nReturns an error result by constructing an <code>AnyError</code> with …\nConverts the result’s error value to <code>AnyError</code> while …\nAdds additional context on top of this error.\nConverts the error into <code>AnyError</code>, and adds additional …\nConverts the error into <code>AnyError</code>, and adds additional …\nDowncast this error object by reference.\nDowncast this error object by reference.\nDowncast this error object by reference.\nConstructs an error enum/struct value while automatically …\nConstructs an error enum/struct value while automatically …\nEnsures a condition, otherwise returns the error …\nEnsures a condition, otherwise returns the error …\nEnsures a condition, otherwise returns an <code>AnyError</code>.\nEnsures a condition, otherwise returns an <code>AnyError</code>.\nReturns the next source in the chain, if any.\nFormats the error message.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an <code>AnyError</code> from a <code>anyhow::Error</code>.\nCreates an <code>AnyError</code> from any <code>Display</code> value by formatting …\nCreates an <code>AnyError</code> from a <code>StackError</code>.\nCreates an <code>AnyError</code> from a boxed <code>StackError</code>.\nCreates an <code>AnyError</code> from a std error.\nCreates an <code>AnyError</code> from a bosed std error.\nCreates an <code>AnyError</code> from a message string.\nEnables all available details.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the error into <code>AnyError</code>.\nConverts the error into <code>AnyError</code>.\nConverts into boxed std error.\nReturns this error as a std error.\nReturns whether this error is transparent and should be …\nReturns <code>true</code> if this error is transparent (i.e. directly …\nSets whether location info is printed.\nReturns the captured location.\nCreates new <code>Meta</code> capturing the caller location.\nReturns metadata captured at creation time, if available.\nReturns the location where this error was created, if …\nCreates a new <code>NoneError</code> error.\nCreates new <code>Meta</code> capturing the caller location.\nReturns a <code>Report</code> to output the error with configurable …\nReturns a <code>Report</code> to output the error with configurable …\nReturns the next source in the chain, if any.\nReturns the next source in the source chain as a <code>ErrorRef</code>.\nReturns an iterator over sources of this error (skipping …\nReturns an iterator over sources of this error (skipping …\nPrints the error’s sources.\nReturns an iterator over this error followed by its …\nReturns an iterator over this error followed by its …\nCreates a <code>ErrorRef</code> for a <code>StackError</code>.\nCreates a <code>ErrorRef</code> for a std error.\nConverts the result’s error value to <code>AnyError</code> while …\nUnwraps a result, returning in the error case while …\nUnwraps a result, returning in the error case while …\nUnwraps a result, returning in the error case while adding …\nUnwraps a result, returning in the error case while adding …\nConverts the result’s error value to <code>AnyError</code> while …\nConverts the result’s error value to <code>AnyError</code> while …\nIf <code>true</code> include call-site info for each source.")